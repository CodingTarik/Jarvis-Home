@using System.Data.Entity.Core.Metadata.Edm
@model SmartHomeProject.Models.DeviceFunctionsModel
@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Device Function Managment</h1>
    <hr />
    <br />
    <h3 class="display-6">Select Device</h3>
    <select name="selectedDevice" class="form-control" id="deviceSelect" onchange="SelectionUpdateDevice()">
        @foreach (var device in Model.DeviceModels)
        {
            <option name="deviceName" value="@device.deviceID">@device.name</option>
        }
    </select>
    <hr />
    <br />
    <h3 class="display-6">Add Function</h3>
    @{
        if (Model != null)
        {
            if (Model.addedFunction && Model.addedSuccess)
            {
                <div class="alert alert-dismissible alert-success">
                    <button type="button" class="close" data-dismiss="alert">&times;</button>
                    <strong>Adding successful!</strong> Die Funktion <strong>@Model.functionNameAdded</strong> was successfully added.
                </div>
            }
            else if (Model.addedFunction && !Model.addedSuccess)
            {
                <div class="alert alert-dismissible alert-danger">
                    <button type="button" class="close" data-dismiss="alert">&times;</button>
                    <strong>Adding not successful!</strong> Die Funktion <strong>@Model.functionNameAdded</strong> could not be added.
                </div>
            }
        }
    }
    <form method="post" asp-controller="Device" asp-action="addDeviceFunction" style="margin-top: 1rem;">
        <div style="margin-top: 2rem">
            <input type="hidden" id="deviceAddID" name="deviceID" value="" />
            <div id="Functionname" style="display: inline-block; float: left; width: 30%;">
                <label style="font-weight: bold; font-family: 'Roboto Medium';" for="functionname">Function name</label>
                <input type="text" class="form-control" id="functionname" name="functionname" placeholder="Enter function name" />
            </div>
            <div id="Functionname" style="display: inline-block; width: 25%; font-family: 'Roboto Medium';">
                <label style="font-weight: bold; font-family: 'Roboto Medium';" for="functionpin">GPIO-Pin</label>
                <input type="text" class="form-control" id="functionpin" name="functionpin" placeholder="Enter GPIO pin" />
            </div>
            <div id="Functionname" style="display: inline-block; width: 10%;">
                <label style="font-weight: bold; font-family: 'Roboto Medium';" for="RGB">RGB-Function</label>
                @Html.CheckBox("RGB")
            </div>
            <div id="Functionname" style="display: inline-block; float: right; width: 30%;">
                <label style="font-weight: bold; font-family: 'Roboto Medium';" for="Bestätigen">Save</label>
                <input type="submit" class="btn btn-info" style="width: 100%" id="Bestätigen" value="Function Add" />
            </div>

        </div>
    </form>
    <br />
    <hr />
    <h3 class="display-6">Edit function</h3>
    @{
        if (Model != null)
        {
            if (Model.functionEdited && Model.functionEditSuccess)
            {
                <div class="alert alert-dismissible alert-success">
                    <button type="button" class="close" data-dismiss="alert">&times;</button>
                    <strong>Editing successful!</strong> The function <strong>@Model.functionNameAdded</strong> was processed successfully.
                </div>
            }
            else if (Model.functionEdited && !Model.functionEditSuccess)
            {
                <div class="alert alert-dismissible alert-danger">
                    <button type="button" class="close" data-dismiss="alert">&times;</button>
                    <strong>Processing not successful!</strong>  The function <strong>@Model.functionNameAdded</strong> could not be edited.
                </div>
            }
            else if (Model.functionDelete && Model.functionDeleteSuccess)
            {
                <div class="alert alert-dismissible alert-success">
                    <button type="button" class="close" data-dismiss="alert">&times;</button>
                    <strong>Deletion successful!</strong> The function <strong>@Model.functionNameAdded</strong> was successfully deleted.
                </div>
            }
            else if (Model.functionDelete && !Model.functionDeleteSuccess)
            {
                <div class="alert alert-dismissible alert-danger">
                    <button type="button" class="close" data-dismiss="alert">&times;</button>
                    <strong>Deletion not successful!</strong> The function <strong>@Model.functionNameAdded</strong> could not be deleted.
                </div>
            }
        }
    }
    <form asp-controller="Device" asp-action="EditDeviceFunction" method="post" style="margin-top: 1rem;">
        <div style="margin-top: 2rem">
            <div id="SelectFunctionEdit" style="display: inline-block; width: 20%; margin-right: 2%">
                <label style="font-weight: bold; font-family: 'Roboto Medium';" for="deviceFunctions">Select function</label>
                <select name="deviceFunctions" class="form-control" id="deviceFunctions" onchange="SelectionUpdateFunctionEdit()"></select>
            </div>
            <div style="display: inline-block; width: 20%; margin-right: 2%;">
                <label style="font-weight: bold; font-family: 'Roboto Medium';" for="functionnameEdit">Function name</label>
                <input type="text" class="form-control" id="functionnameEdit" name="functionnameEdit" placeholder="Function name">
            </div>
            <div style="display: inline-block; width: 10%; margin-right: 2%;">
                <label style="font-weight: bold; font-family: 'Roboto Medium';" for="pinEdit">GPIO-PIN</label>
                <input type="text" class="form-control" id="pinEdit" name="pinEdit" placeholder="GPIO-PIN">
            </div>
            <div id="Functionname" style="display: inline-block; width: 10%;">
                <label style="font-weight: bold; font-family: 'Roboto Medium';" for="Bestätigen">RGB-Function</label>
                @Html.CheckBox("rgbEdit")
            </div>
            <!-- umbenennen von Buttons "value" könnte zu Problemen führen, weil der Controller diese benötigt-->
            <div style="display: inline-block; width: 13%; margin-right: 2%">
                <br>
                <input type="submit" class="btn btn-info" style="width: 100%" id="BestätigenEdit" name="method" value="Save">
            </div>
            <div style="display: inline-block; width: 13%;">
                <br>
                <input type="submit" class="btn btn-danger" style="width: 100%" id="BstätigenDelete" name="method" value="Delete">
            </div>
        </div>
    </form>
    <hr />
</div>
@{
    if (Model != null)
    {
        if (Model.sensorAdded)
        {
            if (Model.sensorAddSuccess)
            {
                <div class="alert alert-dismissible alert-success">
                    <button type="button" class="close" data-dismiss="alert">&times;</button>
                    <strong>Sensor add successful!</strong> The sensor <strong>@Model.sensorName</strong> was successfully added.
                </div>
            }
            else
            {
                <div class="alert alert-dismissible alert-danger">
                    <button type="button" class="close" data-dismiss="alert">&times;</button>
                    <strong>Sensor add not successful!</strong> There couldn't be added a new sensor.
                </div>
            }
        }
        else if (Model.sensorEdited)
        {
            if (Model.sensorEditetSuccess)
            {
                <div class="alert alert-dismissible alert-success">
                    <button type="button" class="close" data-dismiss="alert">&times;</button>
                    <strong>Sensor edit successful!</strong> The sensor <strong>@Model.sensorName</strong> was successfully edited.
                </div>
            }
            else
            {
                <div class="alert alert-dismissible alert-danger">
                    <button type="button" class="close" data-dismiss="alert">&times;</button>
                    <strong>A problem occured while editing the sensor!</strong> 
                </div>
            }
        }
    }
}
<form asp-controller="Device" asp-action="AddNewSensor">
    <div>
        <input type="submit" class="btn btn-info" style="width: 100%" id="AddSensor" name="method" value="Create new sensor">
        <input type="hidden" id="deviceIDSensor" name="deviceIDSensor" value="" />
    </div>
</form>
<form method="post" id="code" asp-controller="Device" asp-action="EditSensor">
    <input type="hidden" id="deviceIDSensorEdit" name="deviceIDSensor" value="" />
    <div id="SelectFunctionEdit">
        <label style="font-weight: bold; font-family: 'Roboto Medium';" for="deviceFunctions">Select sensor</label>
        <select name="sensorOptions" class="form-control" id="sensorOptions" onchange="SelectionUpdateSensors()"></select>
    </div>
    <div class="form-group">
        <label for="Title">Sensorname</label>
        <input id="Sensorname" name="Sensorname" class="form-control" type="text" placeholder="Enter Sensorname" />
    </div>
    <div class="form-group">
        <label for="Title">GPIO-Pins:</label>
        <input id="SensorGPIO_PINS" name="SensorGPIO_PINS" class="form-control" type="text" placeholder="Enter used PINS e.g. 4;23;56;23" />
    </div>
    <div class="form-group">
        <label for="Title">Sensor Location:</label>
        <input id="SensorLocation" name="SensorLocation" class="form-control" type="text" placeholder="Enter location here" />
    </div>
    <div class="form-group">
        <label for="content">Python-Code</label>
        <div id="container" name="python" style="min-height: 200px;"></div>
        <script type="text/javascript" src="/vscode/app.js"></script>
    </div>
    <!-- Renaming buttons could lead to problems in controller in EditSensor-->
    <div>
        <input type="submit" class="btn btn-info" style="width: 100%" name="method" value="Save">
        <br />
    </div>
    <div style="margin-top: 1rem;">
        <input type="submit" class="btn btn-danger" style="width: 100%" name="method" value="Delete">
    </div>
</form>
<script type="text/javascript">
    var devices = new Array();
    @foreach (var device in Model.DeviceModels)
        {
            @:devices.push({
            @:sensors: [
            @if (device.Sensors != null)
                @foreach (var sens in device.Sensors)
                {
                    @:{ ID: @(sens.sensorID), Name: "@Html.Raw(sens.sensorname)", Location: "@(sens.location)", GPIO_PINS: "@foreach (var num in sens.GPIO_PINS) {@(num + ";")}", Python: `@Html.Raw(sens.python)` },
                }
            @:],
            @:deviceFunctions: [
            @if(device.DeviceFunctions != null)
                foreach (var fun in device.DeviceFunctions)
                {
                    @:{ GPIO: @(fun.GPIO_PIN), Name: "@(fun.functionname)", ID:@(fun.functionID), RGB:"@(fun.RGB)"},
                }@:],
            @:id: "@(device.deviceID)", name: "@(device.name)", description: `@(device.description)`, type: "@(device.type)", location: "@(device.location)", port: "@(device.port)", ip: "@(device.ip)"
            @:});

        }

    function SelectionUpdateDevice() {
        var deviceID = document.getElementById("deviceSelect").value;
        for (i = 0; i < devices.length; i++) {
            if (devices[i].id == deviceID) {
                var deviceFunctions = document.getElementById("deviceFunctions");
                deviceFunctions.innerHTML = "";
                var hiddenID = document.getElementById("deviceAddID");
                hiddenID.value = devices[i].id;
                hiddenID = document.getElementById("deviceIDSensor");
                hiddenID.value = devices[i].id;
                hiddenID = document.getElementById("deviceIDSensorEdit");
                hiddenID.value = devices[i].id;
                for (let dvcFunc of devices[i].deviceFunctions) {
                    var option = document.createElement("option");
                    option.text = dvcFunc.Name;
                    option.value = dvcFunc.ID;
                    deviceFunctions.appendChild(option);
                }
                var sensorOptions = document.getElementById("sensorOptions");
                sensorOptions.innerHTML = "";
                for (let sens of devices[i].sensors) {
                    var sensorOpt = document.createElement("option");
                    sensorOpt.text = sens.Name;
                    sensorOpt.value = sens.ID;
                    sensorOpt.setAttribute("name", "sensorOptionName");
                    sensorOptions.appendChild(sensorOpt);
                }
                console.log('test');
                SelectionUpdateFunctionEdit();
                SelectionUpdateSensors();
                return;

            }
        }
      
    }

    function SelectionUpdateFunctionEdit() {
        var deviceID = document.getElementById("deviceSelect").value;
        var option = document.getElementById("deviceFunctions").value;
        for (i = 0; i < devices.length; i++) {
            if (devices[i].id == deviceID) {
                for (let dvcFunc of devices[i].deviceFunctions) {
                    if (dvcFunc.ID == option) {
                        document.getElementById("functionnameEdit").value = dvcFunc.Name;
                        document.getElementById("pinEdit").value = dvcFunc.GPIO;
                        document.getElementById("rgbEdit").checked = dvcFunc.RGB == 'True';
                    }
                }
            }
        }
    }

    function SelectionUpdateSensors() {
        var deviceID = document.getElementById("deviceSelect").value;
        var sensorID = document.getElementById("sensorOptions").value;
        for (i = 0; i < devices.length; i++) {
            if (devices[i].id == deviceID)
            {
                for (let sens of devices[i].sensors) {
                    if (sens.ID == sensorID) {
                        document.getElementById("Sensorname").value = sens.Name;
                        document.getElementById("SensorGPIO_PINS").value = sens.GPIO_PINS;
                        document.getElementById("SensorLocation").value = sens.Location;
                        window.editor.setValue(sens.Python);
                    }
                }
            }

        }
    }

    SelectionUpdateDevice();

    @if (Model != null)
    {
        if (Model.deviceSelected)
        {
            @:for (let element of document.getElementsByName("deviceName"))
            @:{
                @:if (element.value == @(Model.selectedDeviceID))
                    @:element.selected = 'selected';
            @:  SelectionUpdateDevice();
            @:}
        }
        if (Model.sensorAdded || Model.sensorEdited)
        {
            @:for (let element of document.getElementsByName("sensorOptionName"))
            @:{ console.log(element); console.log(element.text);
                @:if (element.text == "@Html.Raw(Model.sensorName)")
                    @:element.selected = 'selected';
            @:}
        }
    }

    SelectionUpdateFunctionEdit();
    SelectionUpdateSensors();

</script>

<script src="../js/DeviceStatus.js"></script>
<script src="../lib/jquery/dist/jquery.min.js"></script>





