@using System.Data.Entity.Core.Metadata.Edm
@model SmartHomeProject.Models.DeviceFunctionsModel
@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Device Function Managment</h1>
    <hr />
    <br />
    <h3 class="display-6">Select Device</h3>
    <select name="selectedDevice" class="form-control" id="deviceSelect" onchange="SelectionUpdateDevice()">
        @foreach (var device in Model.DeviceModels)
        {
            <option name="deviceName" value="@device.deviceID">@device.name</option>
        }
    </select>
    <hr />
    <br />
    <h3 class="display-6">Add Function</h3>
    @{
        if (Model != null)
        {
            if (Model.addedFunction && Model.addedSuccess)
            {
                <div class="alert alert-dismissible alert-success">
                    <button type="button" class="close" data-dismiss="alert">&times;</button>
                    <strong>Adding successful!</strong> Die Funktion <strong>@Model.functionNameAdded</strong> was successfully added.
                </div>
            }
            else if (Model.addedFunction && !Model.addedSuccess)
            {
                <div class="alert alert-dismissible alert-danger">
                    <button type="button" class="close" data-dismiss="alert">&times;</button>
                    <strong>Adding not successful!</strong> Die Funktion <strong>@Model.functionNameAdded</strong> could not be added.
                </div>
            }
        }
    }
    <form method="post" asp-controller="Device" asp-action="addDeviceFunction" style="margin-top: 1rem;">
        <div style="margin-top: 2rem">
            <input type="hidden" id="deviceAddID" name="deviceID" value="" />
            <div id="Functionname" style="display: inline-block; float: left; width: 30%;">
                <label style="font-weight: bold; font-family: 'Roboto Medium';" for="functionname">Function name</label>
                <input type="text" class="form-control" id="functionname" name="functionname" placeholder="Enter function name" />
            </div>
            <div id="Functionname" style="display: inline-block; width: 25%; font-family: 'Roboto Medium';">
                <label style="font-weight: bold; font-family: 'Roboto Medium';" for="functionpin">GPIO-Pin</label>
                <input type="text" class="form-control" id="functionpin" name="functionpin" placeholder="Enter GPIO pin" />
            </div>
            <div id="Functionname" style="display: inline-block; width: 10%;">
                <label style="font-weight: bold; font-family: 'Roboto Medium';" for="RGB">RGB-Function</label>
                @Html.CheckBox("RGB")
            </div>
            <div id="Functionname" style="display: inline-block; float: right; width: 30%;">
                <label style="font-weight: bold; font-family: 'Roboto Medium';" for="Bestätigen">Save</label>
                <input type="submit" class="btn btn-info" style="width: 100%" id="Bestätigen" value="Function Add" />
            </div>
            
        </div>
    </form>
    <br />
    <hr />
    <h3 class="display-6">Edit function</h3>
    @{
        if (Model != null)
        {
            if (Model.functionEdited && Model.functionEditSuccess)
            {
                <div class="alert alert-dismissible alert-success">
                    <button type="button" class="close" data-dismiss="alert">&times;</button>
                    <strong>Editing successful!</strong> The function <strong>@Model.functionNameAdded</strong> was processed successfully.
                </div>
            }
            else if (Model.functionEdited && !Model.functionEditSuccess)
            {
                <div class="alert alert-dismissible alert-danger">
                    <button type="button" class="close" data-dismiss="alert">&times;</button>
                    <strong>Processing not successful!</strong>  The function <strong>@Model.functionNameAdded</strong> could not be edited.
                </div>
            }
            else if (Model.functionDelete && Model.functionDeleteSuccess)
            {
                <div class="alert alert-dismissible alert-success">
                    <button type="button" class="close" data-dismiss="alert">&times;</button>
                    <strong>Deletion successful!</strong> The function <strong>@Model.functionNameAdded</strong> was successfully deleted.
                </div>
            }
            else if (Model.functionDelete && !Model.functionDeleteSuccess)
            {
                <div class="alert alert-dismissible alert-danger">
                    <button type="button" class="close" data-dismiss="alert">&times;</button>
                    <strong>Deletion not successful!</strong> The function <strong>@Model.functionNameAdded</strong> could not be deleted.
                </div>
            }
        }
    }
    <form asp-controller="Device" asp-action="EditDeviceFunction" method="post" style="margin-top: 1rem;">
        <div style="margin-top: 2rem">
            <div id="SelectFunctionEdit" style="display: inline-block; width: 20%; margin-right: 2%">
                <label style="font-weight: bold; font-family: 'Roboto Medium';" for="deviceFunctions">Select function</label>
                <select name="deviceFunctions" class="form-control" id="deviceFunctions" onchange="SelectionUpdateFunctionEdit()"></select>
            </div>
            <div style="display: inline-block; width: 20%; margin-right: 2%;">
                <label style="font-weight: bold; font-family: 'Roboto Medium';" for="functionnameEdit">Function name</label>
                <input type="text" class="form-control" id="functionnameEdit" name="functionnameEdit" placeholder="Function name">
            </div>
            <div style="display: inline-block; width: 10%; margin-right: 2%;">
                <label style="font-weight: bold; font-family: 'Roboto Medium';" for="pinEdit">GPIO-PIN</label>
                <input type="text" class="form-control" id="pinEdit" name="pinEdit" placeholder="GPIO-PIN">
            </div>
            <div id="Functionname" style="display: inline-block; width: 10%;">
                <label style="font-weight: bold; font-family: 'Roboto Medium';" for="Bestätigen">RGB-Function</label>
                @Html.CheckBox("rgbEdit")
            </div>
            <!-- umbenennen von Buttons "value" könnte zu Problemen führen-->
            <div style="display: inline-block; width: 13%; margin-right: 2%">
                <br>
                <input type="submit" class="btn btn-info" style="width: 100%" id="BestätigenEdit" name="method" value="Save">
            </div>
            <div style="display: inline-block; width: 13%;">
                <br>
                <input type="submit" class="btn btn-danger" style="width: 100%" id="BstätigenDelete" name="method" value="Delete">
            </div>
        </div>
    </form>
    <hr />
</div>
<form>
    <div>
        <input type="submit" class="btn btn-info" style="width: 100%" id="BestätigenEdit" name="method" value="Create new sensor">
    </div>
</form>
<form method="post" id="code">
    <div id="SelectFunctionEdit">
        <label style="font-weight: bold; font-family: 'Roboto Medium';" for="deviceFunctions">Select sensor</label>
        <select name="deviceFunctions" class="form-control" id="deviceFunctions" onchange="SelectionUpdateFunctionEdit()"></select>
    </div>
    <div class="form-group">
        <label for="Title">Sensorname</label>
        <input id="Sensorname" class="form-control" type="text" placeholder="Enter Sensorname" />
    </div>
    <div class="form-group">
        <label for="Title">GPIO-Pins:</label>
        <input id="SensorGPIO_PINS" class="form-control" type="text" placeholder="Enter used PINS e.g. 4;23;56;23" />
    </div>
    <div class="form-group">
        <label for="Title">Sensor Location:</label>
        <input id="SensorLocation" class="form-control" type="text" placeholder="Enter location here" />
    </div>
    <div class="form-group">
        <label for="Content">Python-Code</label>
        <div id="Content" style="min-height: 200px;"></div>
    </div>
    <div   >
        <input type="submit" class="btn btn-info" style="width: 100%" name="method" value="Save">
        <br />
    </div>
    <div style="margin-top: 1rem;">
        <input type="submit" class="btn btn-danger" style="width: 100%" name="method" value="Delete">
    </div>
</form>
<script type="text/javascript">

        var devices = new Array();
        @foreach (var device in Model.DeviceModels)
        {
            @:devices.push({
            @:sensors: [
            @if (device.Sensors != null)
                foreach (var sens in device.Sensors)
                {
                    @:{ ID: @(sens.sensorID), Name: @(sens.sensorname), Location: @(sens.location), GPIO_PINS: @(sens.GPIO_PINS), Python: @(sens.python) }
                }
            @: ],
            @:deviceFunctions: [
            @if(device.DeviceFunctions != null)
                foreach (var fun in device.DeviceFunctions)
                {
                    @:{ GPIO: @(fun.GPIO_PIN), Name: "@(fun.functionname)", ID:@(fun.functionID), RGB:"@(fun.RGB)"},
                }@:],
            @:id: "@(device.deviceID)", name: "@(device.name)", description: "@(device.description)", type: "@(device.type)", location: "@(device.location)", port: "@(device.port)", ip: "@(device.ip)"
            @:});

        }
        SelectionUpdateDevice();
        SelectionUpdateFunctionEdit();
        function SelectionUpdateDevice() {
            var deviceID = document.getElementById("deviceSelect").value;
            for (i = 0; i < devices.length; i++) {
                if (devices[i].id == deviceID) {
                    var deviceFunctions = document.getElementById("deviceFunctions");
                    deviceFunctions.innerHTML = "";
                    var hiddenID = document.getElementById("deviceAddID");
                    hiddenID.value = devices[i].id;
                    for (let dvcFunc of devices[i].deviceFunctions) {
                        var option = document.createElement("option");
                        option.text = dvcFunc.Name;
                        option.value = dvcFunc.ID;
                        deviceFunctions.appendChild(option);
                    }
                    for (let sens of devices[i].sensors)
                    {

                        }
                    return;

                }
            }
        }

        function SelectionUpdateFunctionEdit() {
            var deviceID = document.getElementById("deviceSelect").value;
            var option = document.getElementById("deviceFunctions").value;
            for (i = 0; i < devices.length; i++) {
                if (devices[i].id == deviceID) {
                    for (let dvcFunc of devices[i].deviceFunctions) {
                        console.log(option + " " + dvcFunc.ID);
                        if (dvcFunc.ID == option) {
                            document.getElementById("functionnameEdit").value = dvcFunc.Name;
                            document.getElementById("pinEdit").value = dvcFunc.GPIO;
                            document.getElementById("rgbEdit").checked = dvcFunc.RGB == 'True';
                        }
                    }
                }
            }
        }

</script>

<script src="../js/DeviceStatus.js"></script>
<script src="../lib/jquery/dist/jquery.min.js"></script>
<script type="text/javascript">
    $(document).ready(function () {
        $('li.active').removeClass('active');
        $('a[href="' + location.pathname + '"]').closest('li').addClass('active');
    });
</script>



<script src="/vs/min/vs/loader.js"></script>
<script>
    require.config({ paths: { 'vs': '/vs/min/vs' } });
    require(['vs/editor/editor.main'], function () {
        var editor = monaco.editor.create(document.getElementById('Content'), {
            value: [
                'import RPi.GPIO as GPIO',
                'GPIO.setup(PIN[0], GPIO.IN)',
                'return GPIO.input(PIN[0])'
            ].join('\n'),
            language: 'python',
            theme: 'vs-dark'
            
        });
    });
</script>
